// leds.show() with 30 takes about 2.2 ms
// initial design for touch screen ... LCD uses 

#include <myDebug.h>
#include "expSystem.h"


#include "myLeds.h"
#include "rawButtonArray.h"


void inoHandleButtonEvent(void *obj, int row, int col, int event);
    // forward
rawButtonArray buttons(0,inoHandleButtonEvent);


//----------------------------------------------------------------------
// DETAILS
//----------------------------------------------------------------------
// PINS FOR ALL              LCD PIN
//
//     2    TOUCH_IRQ           2     Can use any digital pin
//     3    BUTTON_OUT_LATCH
//     4    BUTTON_OUT_CLOCK
//     5    LEDS_OUT                  1, 5, -8, -10, (31)
//     6    BUTTON_OUT_DATA
//     7    BUTTON_IN_LOAD
//     8    TOUCH_CS           11     Can use any digital pin 
//     9    LCD_DC              5
//    10    LCD_CS              3
//    11    LCD_SDI (MOSI)      6
//          TOUCH_DIN          12
//    12    LCD_SDO (MISO)      9
//          TOUCH_DO           13
//    13    LCD_SCK             7
//          TOUCH_CLK          10
//    14    BUTTON_DIN                A0
//    15    BUTTON_IN_CLOCK_ENABLE    A1
//    16    BUTTON_IN_CLOCK           A2
//    17    BUTTON_IN_DATA            A3
//   -18    LIQUID_SDA0               A4     
//   -19    LIQUID_SCL0               A5
//    20    PIN_EXPR1                 A6
//    21    PIN_EXPR2                 A7
//    22    PIN_EXPR1                 A8
//    23    PIN_EXPR2                 A9





//-----------------------------------------------------------
// setup
//-----------------------------------------------------------

void setup()
{
    Serial.begin(115200);
    delay(1200);
    display(0,"teensyExpression 1.2 started ..",0);
    
    initLEDs();

    #if 1   // FANCY START
    
        for (int row=0; row<NUM_BUTTON_ROWS; row++)
        {
            for (int col=0; col<NUM_BUTTON_COLS; col++)
            {
                float c = col;
                float r = row;
                
                float red = (c/4) * 255.0;
                float blue = ((4-c)/4) * 255.0;
                float green = (r/4) * 255.0;
                
                unsigned rr = red;
                unsigned gg = green;
                unsigned bb = blue;
                
                setLED(row,col,(rr << 16) + (gg << 8) + bb);
            }
        }
        
        for (int b=0; b<70; b++)
        {
            setLEDBrightness(b);
            delay(81-b);
        }
        delay(500);
        for (int b=0; b<15; b++)
        {
            setLEDBrightness(50);
            delay(20);
            setLEDBrightness(0);
            delay(80);
        }
        setLEDBrightness(80);
        delay(800);
        for (int row=0; row<NUM_BUTTON_ROWS; row++)
        {
            for (int col=0; col<NUM_BUTTON_COLS; col++)
            {
                setLED(row,col,0);
            }
        }
        showLEDs();
    #endif
    
    for (int col=0; col<NUM_BUTTON_COLS; col++)
    {
        buttons.setButtonEventMask(0,col,BUTTON_EVENT_PRESS | BUTTON_EVENT_CLICK);
        buttons.setButtonEventMask(1,col,BUTTON_EVENT_PRESS | BUTTON_EVENT_CLICK);
        buttons.setButtonEventMask(2,col,BUTTON_EVENT_PRESS | BUTTON_EVENT_CLICK);
        buttons.setButtonEventMask(3,col,BUTTON_EVENT_PRESS | BUTTON_EVENT_CLICK);
        buttons.setButtonEventMask(4,col,BUTTON_EVENT_PRESS | BUTTON_EVENT_RELEASE);
    }

    buttons.setButtonEventMask(0,4,BUTTON_EVENT_PRESS | BUTTON_EVENT_CLICK | BUTTON_EVENT_LONG_CLICK);
    buttons.setButtonEventMask(4,4,BUTTON_EVENT_PRESS | BUTTON_EVENT_RELEASE | BUTTON_EVENT_LONG_CLICK);
    
    buttons.begin();

    
}


//-----------------------------------------
// loop
//-----------------------------------------

void loop()
{
    // showLEDs();
}



int mode = 0;

//--------------------------------------------------------
// Button event handler
//--------------------------------------------------------

void inoHandleButtonEvent(void *obj, int row, int col, int event)
{
    display(0,"row(%d) col(%d) event(%s)",row,col,rawButtonArray::buttonEventName(event));
    
    if (event == BUTTON_EVENT_PRESS)
        setLED(row,col,WHITE);
        
    if (row < 3)
    {
        if (event == BUTTON_EVENT_LONG_CLICK)
        {
            setLED(row,col,PINK);
            mode = 1;
        }
        else if (event == BUTTON_EVENT_CLICK)
        {
            for (int r=0; r<3; r++)
                for (int c=0; c<NUM_BUTTON_COLS; c++)
                    if ((r!=row) || (c!=col))
                        setLED(r,c,0);
            setLED(row,col,BLUE);
        }
        
    }
        
    if (row == 3)
    {
        if (event == BUTTON_EVENT_CLICK)
        {
            static bool toggle[5] = {0,0,0,0,0};
            toggle[col] = !toggle[col];
            setLED(row,col,toggle[col]?GREEN:0);
        }
    }
    if (row == 4)
    {
        static bool touched[5] = {0,0,0,0,0};
        static bool was_cleared = false;
        if (event == BUTTON_EVENT_LONG_CLICK)
        {
            was_cleared = true;
            for (int j=0; j<NUM_BUTTON_COLS; j++)
            {
                setLED(row,j,0);
                touched[j] = false;
            }
        }
        else if (event == BUTTON_EVENT_RELEASE)
        {
            if (was_cleared)
                was_cleared = false;
            else
            {
                for (int j=0; j<NUM_BUTTON_COLS; j++)
                    if (j != col)
                        if (touched[j])
                            setLED(row,j,YELLOW);
                setLED(row,col,RED);
                touched[col] = true;
            }
        }
    }
    
    showLEDs();
}

    



